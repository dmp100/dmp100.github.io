---
layout: post
title: "Jekyll Blog Setup Guide"
date: 2025-04-05
category: "Notes"
project: "tech-blog"
---

# Jekyll Blog Setup Guide

## Overview

Jekyll을 사용한 정적 블로그 구축 과정과 GitHub Pages 배포 방법에 대한 가이드입니다.

## Prerequisites

### Required Tools
- Ruby (2.7.0 이상)
- RubyGems
- Git
- GitHub 계정

### Installation Check
```bash
ruby --version
gem --version
git --version
```

## Jekyll Installation

### Step 1: Install Jekyll and Bundler
```bash
gem install jekyll bundler
```

### Step 2: Create New Jekyll Site
```bash
jekyll new my-blog
cd my-blog
```

### Step 3: Build and Serve Locally
```bash
bundle exec jekyll serve
```

브라우저에서 `http://localhost:4000` 접속하여 확인

## Project Structure

```
my-blog/
├── _config.yml      # 사이트 설정
├── _posts/          # 블로그 포스트
├── _layouts/        # 페이지 레이아웃
├── _includes/       # 재사용 컴포넌트
├── _sass/          # SCSS 스타일
├── assets/         # 이미지, CSS, JS
├── Gemfile         # Ruby 의존성
└── index.md        # 홈페이지
```

## Configuration

### _config.yml 기본 설정
```yaml
title: Your Blog Title
email: your-email@example.com
description: Blog description
baseurl: ""
url: "https://username.github.io"

# Build settings
markdown: kramdown
theme: minima
plugins:
  - jekyll-feed
  - jekyll-sitemap
```

### Gemfile 설정
```ruby
source "https://rubygems.org"

gem "jekyll", "~> 4.3.0"
gem "minima", "~> 2.5"

group :jekyll_plugins do
  gem "jekyll-feed", "~> 0.12"
  gem "jekyll-sitemap"
end
```

## Writing Posts

### Post Format
포스트는 `_posts` 폴더에 `YYYY-MM-DD-title.md` 형식으로 생성합니다.

### Front Matter
```yaml
---
layout: post
title: "Post Title"
date: 2025-04-05
categories: jekyll update
tags: [jekyll, blog, guide]
---
```

### Markdown Content
```markdown
# Heading 1

일반 텍스트 내용입니다.

## Heading 2

- 리스트 아이템 1
- 리스트 아이템 2

### Code Block
```ruby
puts "Hello, Jekyll!"
```
```

## GitHub Pages Deployment

### Step 1: Create GitHub Repository
```bash
git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin https://github.com/username/username.github.io.git
git push -u origin main
```

### Step 2: Enable GitHub Pages
1. Repository Settings 이동
2. Pages 섹션에서 Source: "Deploy from a branch" 선택
3. Branch: main, Folder: / (root) 선택
4. Save 클릭

### Step 3: Access Your Site
`https://username.github.io`에서 블로그 확인

## Customization

### Theme Customization
```scss
// _sass/minima/_base.scss
$base-font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
$base-font-size: 16px;
$base-line-height: 1.5;
```

### Custom Layouts
```html
<!-- _layouts/post.html -->
---
layout: default
---
<article class="post">
  <header class="post-header">
    <h1 class="post-title">{{ page.title }}</h1>
    <p class="post-meta">{{ page.date | date: "%b %-d, %Y" }}</p>
  </header>

  <div class="post-content">
    {{ content }}
  </div>
</article>
```

## Advanced Features

### Navigation Menu
```html
<!-- _includes/header.html -->
<nav class="site-nav">
  <a href="{{ "/" | relative_url }}">Home</a>
  <a href="{{ "/about/" | relative_url }}">About</a>
  <a href="{{ "/posts/" | relative_url }}">Posts</a>
</nav>
```

### SEO Optimization
```yaml
# _config.yml
plugins:
  - jekyll-seo-tag

# 포스트 front matter
---
title: "Post Title"
description: "Post description for SEO"
image: /assets/images/post-image.jpg
---
```

### Analytics Integration
```html
<!-- _includes/analytics.html -->
<script async src="https://www.googletagmanager.com/gtag/js?id=GA_MEASUREMENT_ID"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'GA_MEASUREMENT_ID');
</script>
```

## Performance Optimization

### Image Optimization
- WebP 포맷 사용
- 적절한 이미지 크기 조정
- Lazy loading 구현

### CSS/JS Minification
```yaml
# _config.yml
sass:
  style: compressed

plugins:
  - jekyll-minifier
```

## Troubleshooting

### Common Issues
1. **Ruby 버전 충돌**: rbenv 또는 rvm 사용
2. **Bundler 에러**: `bundle install` 재실행
3. **GitHub Pages 빌드 실패**: Jekyll 버전 확인

### Local Development
```bash
# 의존성 업데이트
bundle update

# 깨끗한 빌드
bundle exec jekyll clean
bundle exec jekyll build

# 개발 서버 실행
bundle exec jekyll serve --livereload
```

## Best Practices

### Content Organization
- 카테고리와 태그 일관성 유지
- 이미지 파일 체계적 관리
- URL 구조 계획

### Performance
- 이미지 최적화
- CSS/JS 번들링
- CDN 활용 고려

### SEO
- 메타 데이터 최적화
- 구조화된 데이터 마크업
- 사이트맵 생성

## Resources

- [Jekyll Documentation](https://jekyllrb.com/docs/)
- [GitHub Pages Guide](https://pages.github.com/)
- [Jekyll Themes](https://jekyllthemes.io/)
- [Liquid Template Language](https://shopify.github.io/liquid/)

---

*Jekyll을 통해 효율적이고 확장 가능한 블로그를 구축할 수 있습니다. 지속적인 학습과 개선을 통해 더 나은 블로그를 만들어 나가겠습니다.*
